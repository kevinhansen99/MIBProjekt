
import oru.inf.InfDB;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.HashMap;
import oru.inf.InfException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kevin
 */
public class AgentManageAlien extends javax.swing.JFrame {

  private static InfDB idb;

    /**
     * Creates new form AdminPasswordWindow
     */
   

     public AgentManageAlien(InfDB idb) {
        initComponents();
        this.idb = idb;
        textBoogiesName.setVisible(false);
        labelRaceName.setVisible(false);
        fillCbs();
    }

     private void emptyInputs() {
        textPannelMain.setText("");
        textSearchAlien.setText("");
        textAlienID.setText("");
        textNameID.setText("");
        textDateName.setText("");
        textTelefonName.setText("");
        textBoogiesName.setText("");
        comboboxPlatsName.setSelectedIndex(-1);
        comboboxAgentName.setSelectedIndex(-1);
        comboboxRaceName.setSelectedIndex(-1);
        comboboxAreaNamn.setSelectedIndex(-1);
        comboboxRaceBottom.setSelectedIndex(-1);
    }
     
    private void fillCbs() {
        //Hämtar och fyllar i alla Platser i samtliga comboboxes. Denna metod körs när sidan laddas in.
        String queryLocation = "SELECT BENAMNING FROM PLATS;";
        ArrayList<String> locations = new ArrayList<>();
        try {
            locations = idb.fetchColumn(queryLocation);

            for (String location : locations) {
                comboboxPlatsName.addItem(location);
                comboboxRaceBottom.addItem(location);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }

        comboboxPlatsName.setSelectedIndex(-1);
        comboboxRaceBottom.setSelectedIndex(-1);

        //Hämtar och fyllar i alla Agenter i samtliga comboboxes. Denna metod körs när sidan laddas in.
        String queryAgent = "SELECT Namn FROM AGENT;";
        ArrayList<String> names = new ArrayList<>();
        try {
            names = idb.fetchColumn(queryAgent);

            for (String name : names) {
                comboboxAgentName.addItem(name);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
        comboboxAgentName.setSelectedIndex(-1);
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textPannelMain = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        textSearchAlien = new javax.swing.JTextField();
        buttonSearchAlien = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textDateName = new javax.swing.JTextField();
        textAlienID = new javax.swing.JTextField();
        textNameID = new javax.swing.JTextField();
        textTelefonName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textBoogiesName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        labelRaceName = new javax.swing.JLabel();
        comboboxPlatsName = new javax.swing.JComboBox<>();
        comboboxRaceName = new javax.swing.JComboBox<>();
        comboboxAgentName = new javax.swing.JComboBox<>();
        buttonBack = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        changeConfirmButton = new javax.swing.JButton();
        buttonListAliensName = new javax.swing.JButton();
        comboboxAreaNamn = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        comboboxRaceBottom = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textPannelMain.setColumns(20);
        textPannelMain.setRows(5);
        jScrollPane1.setViewportView(textPannelMain);

        jLabel1.setText("ALIEN ID:");
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        buttonSearchAlien.setText("Sök");
        buttonSearchAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchAlienActionPerformed(evt);
            }
        });

        jLabel2.setText("NAMN:");
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel3.setText("SÖK ALIEN:");
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel4.setText("RAS:");
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel7.setText("REGISTRERINGSDATUM:");
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel8.setText("TELEFON:");
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel5.setText("PLATS:");
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel6.setText("AGENT:");
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        labelRaceName.setText("ANTAL BOOGIES:");
        labelRaceName.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        comboboxRaceName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BOGLODITE", "WORM", "SQUID" }));

        buttonBack.setText("Tillbaka");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        jButton3.setText("Registerar ny Alien");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel10.setText("STARTDATUM:");
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel11.setText("SLUTDATUM:");
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jButton4.setText("Sök Datum");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        changeConfirmButton.setText("Ändra");
        changeConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeConfirmButtonActionPerformed(evt);
            }
        });

        buttonListAliensName.setText("Lista alla Aliens");
        buttonListAliensName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonListAliensNameActionPerformed(evt);
            }
        });

        comboboxAreaNamn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboboxAreaNamn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxAreaNamnActionPerformed(evt);
            }
        });

        jLabel12.setText("PLATS:");
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel13.setText("RAS:");

        comboboxRaceBottom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboboxRaceBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxRaceBottomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(changeConfirmButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboboxAgentName, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 227, Short.MAX_VALUE))
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboboxRaceName, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelRaceName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textBoogiesName))
                            .addComponent(textSearchAlien, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSearchAlien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textAlienID)
                            .addComponent(textNameID)
                            .addComponent(textDateName)
                            .addComponent(textTelefonName)
                            .addComponent(comboboxPlatsName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonListAliensName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboboxAreaNamn, 0, 157, Short.MAX_VALUE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboboxRaceBottom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textSearchAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSearchAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textAlienID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textNameID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textDateName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textTelefonName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboboxPlatsName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboboxRaceName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelRaceName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textBoogiesName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboboxAgentName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(changeConfirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonListAliensName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(comboboxRaceBottom, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboboxAreaNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
       setVisible(false);
       AgentMainWindow agentwindow = new AgentMainWindow(idb);
       agentwindow.setVisible(true);
    }//GEN-LAST:event_buttonBackActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void buttonSearchAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchAlienActionPerformed
       //Om textrutan inte är tom.
        if (Validation.textEmptyValidation(textSearchAlien)) {

            //Hämtar in text från sökfältet
            String searchAlien = textSearchAlien.getText();

            try {
                //Hämtar ID från databasen
                String alienFromSQL = idb.fetchSingle("SELECT ALIEN_ID FROM ALIEN WHERE NAMN = " + "'" + searchAlien + "'");
                textAlienID.setText(alienFromSQL);
                //Parsar om ID till en int för att kunna användas mot databasen.
                int inputAliensID = Integer.parseInt(alienFromSQL);

                //Hämtar Namn från databasen
                String name = idb.fetchSingle("SELECT NAMN FROM ALIEN WHERE ALIEN_ID = " + "'" + inputAliensID + "'");
                textNameID.setText(name);

                //Hämtar Regdatum från databasen
                String regDate = idb.fetchSingle("SELECT REGISTRERINGSDATUM FROM ALIEN WHERE ALIEN_ID = " + "'" + inputAliensID + "'");
                textDateName.setText(regDate);

                //Hämtar Regdatum från databasen
                String regDate2 = idb.fetchSingle("SELECT REGISTRERINGSDATUM FROM ALIEN WHERE ALIEN_ID = " + "'" + inputAliensID + "'");

                //Hämtar Telefon från databasen
                String phone = idb.fetchSingle("SELECT TELEFON FROM ALIEN WHERE ALIEN_ID = " + "'" + inputAliensID + "'");
                textTelefonName.setText(phone);

                //Hämtar Plats från databasen
                String location = idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID = (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + inputAliensID + "')");
                comboboxPlatsName.setSelectedItem(location);

                //Hämtar Ras från databasen
                //Hämtar in info om Bogolodite för att avgöra vilken ras alien användare sökt efter är
                String boglodite = idb.fetchSingle("SELECT ALIEN_ID FROM BOGLODITE WHERE ALIEN_ID = " + "'" + inputAliensID + "'");
                String bogloditeBoogies = idb.fetchSingle("SELECT ANTAL_BOOGIES FROM BOGLODITE WHERE ALIEN_ID = " + "'" + inputAliensID + "'");

                //Hämtar in info om Squid för att avgöra vilken ras alien användare sökt efter är
                String squid = idb.fetchSingle("SELECT ALIEN_ID FROM SQUID WHERE ALIEN_ID = " + "'" + inputAliensID + "'");
                String squidArms = idb.fetchSingle("SELECT ANTAL_ARMAR FROM SQUID WHERE ALIEN_ID = " + "'" + inputAliensID + "'");

                //Hämtar in info om Worm för att avgöra vilken ras alien användare sökt efter är
                String worm = idb.fetchSingle("SELECT ALIEN_ID FROM WORM WHERE ALIEN_ID = " + "'" + inputAliensID + "'");

                //Kollar ovanstående strängar efter ett värde som inte är null. Någon av frågorna måste returnerna ett svar då en alien alltid måste vara av en viss ras. Sätter sedan combobox till motsvarande rastillhörighet.
                if (boglodite != null) {
                    comboboxRaceName.setSelectedItem("Boglodite");
                    textBoogiesName.setText(bogloditeBoogies);
                } else if (squid != null) {
                    comboboxRaceName.setSelectedItem("Squid");
                    textBoogiesName.setText(squidArms);
                } else if (worm != null) {
                    comboboxRaceName.setSelectedItem("Worm");
                }

                //Hämtar ansvarig Agent från databasen
                String agent = idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + inputAliensID + "')");
                comboboxAgentName.setSelectedItem(agent);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Alien hittades inte!");
                textSearchAlien.setText("");
                textSearchAlien.requestFocus();
            }
        }
    }//GEN-LAST:event_buttonSearchAlienActionPerformed

    private void buttonListAliensNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonListAliensNameActionPerformed
        //Nollar textfält varje gång denna metod körs.
        textPannelMain.setText("");
        //Deklarar en ArrayList av HashMaps som innehåller information om alla aliens.
        ArrayList<HashMap<String, String>> aliens = new ArrayList<HashMap<String, String>>();

        try {
            //Databasfråga
            String query = "SELECT * FROM ALIEN;";

            //Skickar in frågan till databasen via metoden fetchRows och sparar detta i aliens ArrayListen.
            aliens = idb.fetchRows(query);

            //Loopar igenom hashmapen för att printa ut all information om alien. Printar ut alla rader på en ny linje och avslutar med en avskiljare "-----------"
            for (HashMap<String, String> alien : aliens) {
                textPannelMain.append("Alien ID: " + alien.get("ALIEN_ID") + "\n");
                textPannelMain.append("Namn: " + alien.get("NAMN") + "\n");
                textPannelMain.append("Telefon: " + alien.get("TELEFON") + "\n");
                textPannelMain.append("Registreringsdatum: " + alien.get("REGISTRERINGSDATUM") + "\n");
                textPannelMain.append("Plats: " + idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID = (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                textPannelMain.append("Ansvarig agent: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                textPannelMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
    }//GEN-LAST:event_buttonListAliensNameActionPerformed

    private void comboboxAreaNamnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxAreaNamnActionPerformed
         //Nollar textfält varje gång denna metod körs.
        textPannelMain.setText("");
        //Deklarar en ArrayList av HashMaps som innehåller information om alla aliens.
        ArrayList<HashMap<String, String>> aliens = new ArrayList<HashMap<String, String>>();

        try {
            //Hämtar in val i combobox
            String choice = comboboxAreaNamn.getSelectedItem().toString();
            //Databasfråga för att få fram vilken alien som befinner sig på den valda platsen.
            String query = "SELECT * FROM ALIEN WHERE ALIEN_ID IN (SELECT ALIEN_ID FROM ALIEN WHERE PLATS = (SELECT PLATS_ID FROM PLATS WHERE BENAMNING = '" + choice + "')) ORDER BY ALIEN_ID;";

            //Skickar in frågan till databasen via metoden fetchRows och sparar detta i aliens ArrayListen.
            aliens = idb.fetchRows(query);

            //Loopar igenom hashmapen för att printa ut all information om alien. Printar ut alla rader på en ny linje och avslutar med en avskiljare "-----------"
            for (HashMap<String, String> alien : aliens) {
                textPannelMain.append("Alien ID: " + alien.get("ALIEN_ID") + "\n");
                textPannelMain.append("Namn: " + alien.get("NAMN") + "\n");
                textPannelMain.append("Telefon: " + alien.get("TELEFON") + "\n");
                textPannelMain.append("Registreringsdatum: " + alien.get("REGISTRERINGSDATUM") + "\n");
                textPannelMain.append("Ansvarig agent: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                textPannelMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        } catch (java.lang.NullPointerException e) {
            //
        }
    }//GEN-LAST:event_comboboxAreaNamnActionPerformed

    private void comboboxRaceBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxRaceBottomActionPerformed
       //Nollar textfältet i mitten innan körning.
        textPannelMain.setText("");
        try {
            //Hämtar in val från combobox
            String valda = comboboxRaceBottom.getSelectedItem().toString();
            //Databasfråga
            String query = "SELECT * FROM ALIEN WHERE ALIEN_ID IN (SELECT ALIEN_ID FROM " + valda + ");";

            //Skickar in frågan till databasen via metoden fetchRows och sparar detta i aliens ArrayListen.
            ArrayList<HashMap<String, String>> aliens = idb.fetchRows(query);

            //Loopar igenom hashmapen för att printa ut all information om alien. Printar ut alla rader på en ny linje och avslutar med en avskiljare "-----------"
            for (HashMap<String, String> alien : aliens) {
                textPannelMain.append("Alien ID: " + alien.get("ALIEN_ID") + "\n");
                textPannelMain.append("Namn: " + alien.get("NAMN") + "\n");
                textPannelMain.append("Telefon: " + alien.get("TELEFON") + "\n");
                textPannelMain.append("Registreringsdatum: " + alien.get("REGISTRERINGSDATUM") + "\n");
                textPannelMain.append("Plats: " + idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID IN (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                textPannelMain.append("Ansvarig agent: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID IN (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                textPannelMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        } catch (java.lang.NullPointerException e) {
            //
        }
    }//GEN-LAST:event_comboboxRaceBottomActionPerformed

    private void changeConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeConfirmButtonActionPerformed
     //Kollar så att alla fält är korrekt ifyllda av användare.
        if (Validation.isNotEmpty(textNameID, textDateName, textTelefonName)
                && Validation.ifCBEmpty(comboboxPlatsName, comboboxRaceName, comboboxAgentName)
                && Validation.isInteger(textBoogiesName)
                && Validation.regexDate(textDateName.getText())) {

            //Dialogruta till användaren om denna är säker att på gå vidare och ändra information.
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ändra informationen?", "Ändra information..", 2);
            //Om svar är "OK".
            if (input == 0) {
                // Hämtar in alla nödvändiga textfält från användaren.
                int alienID = Integer.parseInt(textAlienID.getText());
                String name = textNameID.getText();
                String registration = textDateName.getText();
                String telephone = textTelefonName.getText();
                String agent = comboboxAgentName.getSelectedItem().toString();
                String area = comboboxPlatsName.getSelectedItem().toString();
                String race = comboboxRaceName.getSelectedItem().toString();
                String raceInfo = textBoogiesName.getText();

                try {
                    //Uppdaterar aliennamn till databasen
                    idb.update("UPDATE ALIEN SET NAMN = " + "'" + name + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");
                    //Uppdaterar registreringsdatum till databasen
                    idb.update("UPDATE ALIEN SET REGISTRERINGSDATUM = " + "'" + registration + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");
                    //Uppdaterar telefon till databasen
                    idb.update("UPDATE ALIEN SET TELEFON = " + "'" + telephone + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Hämtar först plats_ID och uppdaterar sedan plats till databasen
                    String locationID = idb.fetchSingle("SELECT PLATS_ID FROM PLATS WHERE BENAMNING = " + "'" + area + "'");
                    Integer.parseInt(locationID);
                    idb.update("UPDATE ALIEN SET PLATS = " + "'" + locationID + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Hämtar först agent_ID och uppdaterar sedan agent till databasen
                    String agentID = idb.fetchSingle("SELECT AGENT_ID FROM AGENT WHERE NAMN = " + "'" + agent + "'");
                    Integer.parseInt(agentID);
                    idb.update("UPDATE ALIEN SET ANSVARIG_AGENT = " + "'" + agentID + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Försöker hämta ett värde från alla 3 olika alien tabeller i databasen. Någon av dessa måste returnera ett alien_ID då en alien alltid måste vara av en viss ras.
                    String boglodite = idb.fetchSingle("SELECT ALIEN_ID FROM BOGLODITE WHERE ALIEN_ID = " + "'" + alienID + "'");
                    String squid = idb.fetchSingle("SELECT ALIEN_ID FROM SQUID WHERE ALIEN_ID = " + "'" + alienID + "'");
                    String worm = idb.fetchSingle("SELECT ALIEN_ID FROM WORM WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Bestämmer nuvarande rastillhörighet genom att kolla vilket värde som inte är null från förfrågningarna ovan.
                    String alienRace = "";
                    if (boglodite != null) {
                        alienRace = "Boglodite";
                    } else if (squid != null) {
                        alienRace = "Squid";
                    } else if (worm != null) {
                        alienRace = "Worm";
                    }

                    //Tar bort existerande rastillhörighet, då en alien bara kan vara en ras åt gången....duh.
                    idb.delete("DELETE FROM " + alienRace + " WHERE ALIEN_ID = " + alienID);

                    //Sätter ny rastillhörighet
                    if (race.equals("Boglodite")) {
                        Integer.parseInt(raceInfo);
                        //Skickar in ytterligare data eftersom alien är en boglodite
                        idb.insert("INSERT INTO BOGLODITE VALUES (" + alienID + "," + raceInfo + ")");
                    } else if (race.equals("Squid")) {
                        //Skickar in ytterligare data eftersom alien är en squid
                        Integer.parseInt(raceInfo);
                        idb.insert("INSERT INTO SQUID VALUES (" + alienID + "," + raceInfo + ")");
                    } else if (race.equals("Worm")) {
                        idb.insert("INSERT INTO WORM VALUES (" + alienID + ")");
                    }

                    JOptionPane.showMessageDialog(null, "Ändring av information för alien lyckades!");
                    //Fångar om något gick snett med ett väldigt informativt felmeddelande.
                } catch (InfException | NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
                }
                //Tömmar alla fält/combobox efter tryck.
                emptyInputs();
            }   
    }//GEN-LAST:event_changeConfirmButtonActionPerformed

    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgentManageAlien(idb).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonListAliensName;
    private javax.swing.JButton buttonSearchAlien;
    private javax.swing.JButton changeConfirmButton;
    private javax.swing.JComboBox<String> comboboxAgentName;
    private javax.swing.JComboBox<String> comboboxAreaNamn;
    private javax.swing.JComboBox<String> comboboxPlatsName;
    private javax.swing.JComboBox<String> comboboxRaceBottom;
    private javax.swing.JComboBox<String> comboboxRaceName;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JLabel labelRaceName;
    private javax.swing.JTextField textAlienID;
    private javax.swing.JTextField textBoogiesName;
    private javax.swing.JTextField textDateName;
    private javax.swing.JTextField textNameID;
    private javax.swing.JTextArea textPannelMain;
    private javax.swing.JTextField textSearchAlien;
    private javax.swing.JTextField textTelefonName;
    // End of variables declaration//GEN-END:variables
}
